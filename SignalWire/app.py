import sys
import os

# Add the directory containing AIOrchestrator to the Python path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from flask import Flask, request, Response, send_from_directory
from twilio.twiml.voice_response import VoiceResponse, Gather
from datetime import datetime
from AIOrchestrator.orchestra import orchestrate

app = Flask(__name__)

# Handles any incoming calls to the server and welcomes the caller
@app.route("/", methods=['GET', 'POST'])
def welcome_handler():
    # The endpoint will be queried by SignalWire when calls are received
    # The request will be responded to with an XML document, generated by the AI Orchestrator

    print(request.values)

    # Get called number and time
    caller = request.values.get('From')
    now = datetime.now()

    # Generate a test response (Will be replaced by AI Orchestrator)
    response = VoiceResponse()
    response.say("Hello, this call will have a transcript stored for development purposes.\
                 No recordings of the call will be stored.")

    # Redirects to the gather endpoint to get user input
    response.redirect('/gather', method='POST')

    return Response(response.to_xml(), mimetype='text/xml')

# Handles user input and generates a response from the AI Orchestrator, then sends it back to the user
@app.route("/gather", methods=['GET', 'POST'])
def qa_handler():
    # Whenever user input is recieved, this will handle it
    print(request.values)

    # Get user input
    response.say('Please ask your question.')
    usrPrompt = request.values.get('SpeechResult')     

    # Generate a test response (Will be replaced by AI Orchestrator)
        
    response = VoiceResponse()

    if "goodbye" in usrPrompt.lower():
        response.say("Goodbye!")
        response.hangup()
    else:
        # Generates a response from the AI Orchestra, and gets the path to the generated audio file
        # Then asks for a link using the filename, generating it through the audio function
        ttsPath = orchestrate(usrPrompt)
        filename = os.path.basename(ttsPath)
        audio_url = f"{request.url_root}audio/{filename}"

        gather = Gather(input='speech', timeout=30, speech_timeout='auto', action='/gather', method='POST')
        gather.say('Please ask your question.')
        gather.play(audio_url)
        response.append(gather)

    return Response(response.to_xml(), mimetype='text/xml')

# Handles audio files and sends them to the qa_handler
@app.route('/audio/<filename>')
def audio(filename):
    return send_from_directory(os.path.join(app.root_path, 'tts/audio_files'), filename)

if __name__ == "__main__":
    app.run(port=5000)